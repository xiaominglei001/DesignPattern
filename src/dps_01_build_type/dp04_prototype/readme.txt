Prototype(原型)模式
在《java与模式》中，原型模式定义为：通过给出一个原型对象来指明所要创建的对象的类型，
然后用复制这个原型对象的办法创建出更多同类型的对象。用原型实例指定创建对象的种类,并且通过拷贝这些原型创建新的对象.
Prototype模式答应一个对象再创建另外一个可定制的对象，根本无需知道任何如何创建的细节,
工作原理是:通过将一个原型对象传给那个要发动创建的对象，这个要发动创建的对象通过请求原型对象拷贝它们自己来实施创建。

角色:
1)抽象原型角色：这是一个抽象角色，通常由一个接口或抽象类实现。此角色给出所有的具体原型类所需的接口。抽象原型角色通常实现了Cloneable接口。 
2)具体原型角色：被复制的对象。此角色需要实现抽象原型角色所要求的接口。

浅拷贝:浅拷贝是指源对象与拷贝对象共用一份实体，仅仅是引用的变量不同（名称不同）。
对其中任何一个对象的改动都会影响另外一个对象。举个例子，一个人一开始叫张三，后来改名叫李四了，
可是还是同一个人，不管是张三缺胳膊少腿还是李四缺胳膊少腿，都是这个人倒霉。
比较典型的就有Reference（引用）对象，如Class（类）。

深拷贝:深拷贝是指源对象与拷贝对象互相独立，其中任何一个对象的改动都不会对另外一个对象造成影响。
举个例子，一个人名叫张三，后来用他克隆（假设法律允许）了另外一个人，叫李四，
不管是张三缺胳膊少腿还是李四缺胳膊少腿都不会影响另外一个人。比较典型的就是Value（值）对象，
如预定义类型Int32，Double，以及结构（struct），枚举（Enum）等。

浅拷贝:Shallow Copy = Bitwise Copy
深拷贝:Deep Copy = Memberwise Copy.