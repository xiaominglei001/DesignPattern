Proxy(代理)模式：
设计模式中定义: 为其他对象提供一种代理以控制对这个对象的访问.
代理模式给某一个对象提供一个代理对象，并由代理对象控制对源对象的引用。
代理就是一个人或一个机构代表另一个人或者一个机构采取行动。某些情况下，客户不想或者不能够直接引用一个对象
，代理对象可以在客户和目标对象直接起到中介的作用。客户端分辨不出代理主题对象与真实主题对象。
代理模式可以并不知道真正的被代理对象，而仅仅持有一个被代理对象的接口，这时候代理对象不能够创建被代理对象，
被代理对象必须有系统的其他角色代为创建并传入。

代理模式一般涉及到的角色有：
抽象主题角色(Subject)：声明真实对象和代理对象的共同接口；
主题代理角色(Proxy)：代理对象角色内部含有对真实对象的引用，从而可以操作真实对象，
            同时代理对象提供与真实对象相同的接口以便在任何时刻都能代替真实对象。
            同时，代理对象可以在执行真实对象操作时，附加其他的操作，相当于对真实对象进行封装。
真实主题角色(RealSubject)：代理角色所代表的真实对象，是我们最终要引用的对象。

代理模式是常用的设计模式，它的特征是代理类与委托类有同样的接口，代理类主要负责为委托类预处理消息、过滤消息、把消息转发给委托类，以及事后处理消息等。代理类与委托类之间通常会存在关联关系，一个代理类的对象与一个委托类的对象关联，代理类的对象本身并不真正实现服务，而是通过调用委托类的对象的相关方法，来提供特定的服务。 
按照代理类的创建时期，代理类可分为两种。 
静态代理类：由程序员创建或由特定工具自动生成源代码，再对其编译。在程序运行前，代理类的.class文件就已经存在了。 
动态代理类：在程序运行时，运用反射机制动态创建而成。

java的动态代理对所有实现接口的类通用，这里仅举一例。