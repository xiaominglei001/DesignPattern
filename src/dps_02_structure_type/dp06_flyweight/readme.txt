Flyweight(享元)模式：
Flyweight在拳击比赛中指最轻量级。享元模式以共享的方式高效的支持大量的细粒度对象。
享元模式能做到共享的关键是区分内蕴状态和外蕴状态。内蕴状态存储在享元内部，不会随环境的改变而有所不同。
外蕴状态是随环境的改变而改变的。外蕴状态不能影响内蕴状态，它们是相互独立的。将可以共享的状态和不可以共享的状态从常规类中区分开来，
将不可以共享的状态从类里剔除出去。客户端不可以直接创建被共享的对象，而应当使用一个工厂对象负责创建被共享的对象。
享元模式大幅度的降低内存中对象的数量。 

享元模式的角色:
1、抽象享元(Flyweight)角色：此角色是所有的具体享元类的基类，为这些类规定出需要实现的公共接口，
  通过这个接口Flyweight可以接受并作用于外部状态。
2、具体享元(ConcreteFlyweight)角色：实现抽象享元角色所规定的接口。
  如果有内蕴状态（Intrinsic State）的话，必须负责为内蕴状态提供存储空间。
  享元对象的内蕴状态必须与对象所处的周围环境无关，从而使得享元对象可以在系统内共享的。
3、享元工厂(FlyweightFactory)角色：本角色负责创建和管理享元角色。
  本角色必须保证享元对象可以被系统适当地共享。当一个客户端对象调用一个享元对象的时候，
  享元工厂角色会检查系统中是否已经有一个复合要求的享元对象。如果已经有了，享元工厂角色就应当提供这个已有的享元对象；
  如果系统中没有一个适当的享元对象的话，享元工厂角色就应当创建一个合适的享元对象。
4、客户端(Client)角色：本角色需要维护一个对所有享元对象的引用。本角色需要自行存储所有享元对象的外蕴状态。

例:
在饭店里,如果有菜谱所要的菜,就不用去买,直接去菜库里去拿,如果没有就要去买,然后放在菜库里. 
