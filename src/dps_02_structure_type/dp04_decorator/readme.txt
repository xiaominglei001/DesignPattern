Decorator(装饰)模式：
装饰模式以对客户端透明的方式扩展对象的功能，是继承关系的一个替代方案，
提供比继承更多的灵活性。动态给一个对象增加功能，这些功能可以再动态的撤消。
增加由一些基本功能的排列组合而产生的非常大量的功能。

在装饰模式中的各个角色有：
抽象构件（Component）角色：给出一个抽象接口，以规范准备接收附加责任的对象。 
具体构件（Concrete Component）角色：定义一个将要接收附加责任的类。 
抽象装饰（Decorator）角色：持有一个构件（Component）对象的实例，并定义一个与抽象构件接口一致的接口。 
具体装饰（Concrete Decorator）角色：负责给构件对象"贴上"附加的责任。