Strategy(策略)模式：
策略模式针对一组算法，将每一个算法封装到具有共同接口的独立的类中，从而使得它们可以相互替换。
策略模式使得算法可以在不影响到客户端的情况下发生变化。策略模式把行为和环境分开。环境类负责维持和查询行为类，
各种算法在具体的策略类中提供。由于算法和环境独立开来，算法的增减，修改都不会影响到环境和客户端。

策略模式由客户端角色，环境角色，抽象算法角色，具体算法角色组成，通过环境角色来调用具体的算法，其间还可以用工厂辅助。 

1、角色
环境（Context）角色：持有一个Strategy类的引用。 
抽象策略（Strategy）角色：这是一个抽象角色，通常由一个接口或抽象类实现。此角色给出所有的具体策略类所需的接口。 
具体策略（ConcreteStrategy）角色：包装了相关的算法或行为。

2、状态模式的经典实现
Tcp就是状态模式的一个经典实现：TcpConnect 他有三个状态，TcpEstablished  TcpListen  TcpClosed
TcpConnect的功能会跟着状态的改变而改变。或是Established,或是Listen,或是Closed
三、状态模式的与策略模式，看到上边的部分，很容易让人想到策略模式，这两个模式有什么区别呢？如何使用
策略模式：
1，当一个环境角色选择了一个具体的策略，那么在整个环境类的生命周期都不会改变
2，策略模式的环境自己选择一个具体的策略
3，策略模式并不明确告诉客户端它所选择的具体策略是什么，对客户是黑箱。
状态模式：
1，在整个环境类的生命周期中会有明显的状态改变。
2，状态模式是被外在原因放入一个策略
3,状态模式明显的告诉客户端当前的状态，对客户是白箱。

