Interpreter(解释)器模式：
给定一个语言后，解释器模式可以定义出其文法的一种表示，并同时提供一个解释器。
客户端可以使用这个解释器来解释这个语言中的句子。解释器模式将描述怎样在有了一个简单的文法后，使用模式设计解释这些语句。
在解释器模式里面提到的语言是指任何解释器对象能够解释的任何组合。在解释器模式中需要定义一个代表文法的命令类的等级结构，
也就是一系列的组合规则。每一个命令对象都有一个解释方法，代表对命令对象的解释。命令对象的等级结构中的对象的任何排列组合都是一个语言。 

解释器模式的目的:
如果某一类问题一再的发生,此时比较好的做法是将此类问题的各个实例表达为一个简单语言中的语句,这样可以建造一个解释器,通过解释这些语句达到解决问题的目的。

解释器模式的定义：
定义语言的文法，并且建立一个解释器来解释该语言中的句子。它属于类的行为模式。这里的语言意思是使用规定格式和语法的代码。

示意案例:
解释器这个模式在实际应用当中应用并不广泛,能想到的例子也不多,可能是我水平不够,这里我拿一个把大写数字输出为阿拉伯数字数字的需求来用解释器模式实现。例如：
1:伍千肆百参拾贰，输出为5432。
2:当用户输入的是数字字符串时，直接输入数字，例如：1000，直接输出1000。 
    
参与者：
AbstractException:抽象表达式，声明一个抽象的解释操作，这个接口为抽象语法树中所有的节点所共享。
TerminalExpression:终结符表达式。实现与文法中的终结符相关联的解释操作，一个句子中的每个终结符需要该类的一个实例。
NonterminalExpression:非终结符表达式，对于文法中的每一条规则R：：=R1R2..都需要一个NonterminalExpression类。为从R1到Rn的每个符号都维护一个AbstractExpression类型的实例变量。
为文法中的非终结符实现解释操作，解释操作一般要递归地调用表示R1到Rn的那些对象的解释操作。
Context：上下文，包含解释器需要解释的全局信息。
Client:构建表示该文法定义的语言中一个特定的句子的抽象语法树。该抽象语法树由NonterminalExpression和TerminalExpression的实例装配而成。调用解释操作等。

示意案例1:
解释器这个模式在实际应用当中应用并不广泛,能想到的例子也不多,可能是我水平不够,这里我拿一个把大写数字输出为阿拉伯数字数字的需求来用解释器模式实现。例如：
1:伍千肆百参拾贰，输出为5432。
2:当用户输入的是数字字符串时，直接输入数字，例如：1000，直接输出1000。 

示意案例2摘自《大话设计模式》第27章解释器模式:
一套规则和QB有些类似，为了简便起见，我做了改动：
O表示音阶(O1表示低音阶，O2表示中音阶，O3表示高音阶)；
P表示休止符；
T代表速度，以毫秒为单位，T 1000表示每节拍一秒，T 500表示每节拍半秒；
CDEFGAB表示Do-Re-Mi-Fa-So-La-Ti；
音符长度1表示一拍，2表示二拍，0.5表示半拍，0.25表示四分之一拍，以此类推；
所有的字母和数字都要用半角空格分开；
例如上海滩的歌曲第一句，‘浪奔’，可以写成‘O 2 E 0.5 G 0.5 A 3 ’,表示中音开始，演奏的是 mi so la。

